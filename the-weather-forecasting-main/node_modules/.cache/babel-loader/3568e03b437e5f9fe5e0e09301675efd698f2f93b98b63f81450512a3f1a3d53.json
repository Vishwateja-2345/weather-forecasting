{"ast":null,"code":"import _objectWithoutProperties from\"/workspace/the-weather-forecasting-main/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";const _excluded=[\"date\"];export function groupBy(key){return function group(array){return array.reduce((acc,obj)=>{const property=obj[key];const{date}=obj,rest=_objectWithoutProperties(obj,_excluded);acc[property]=acc[property]||[];acc[property].push(rest);return acc;},{});};}export function getAverage(array){let isRound=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;let average=0;if(isRound){average=Math.round(array.reduce((a,b)=>a+b,0)/array.length);if(average===0){average=0;}}else average=(array.reduce((a,b)=>a+b,0)/array.length).toFixed(2);return average;}export function getMostFrequentWeather(arr){const hashmap=arr.reduce((acc,val)=>{acc[val]=(acc[val]||0)+1;return acc;},{});return Object.keys(hashmap).reduce((a,b)=>hashmap[a]>hashmap[b]?a:b);}export const descriptionToIconName=(desc,descriptions_list)=>{let iconName=descriptions_list.find(item=>item.description===desc);return iconName.icon||'unknown';};export const getWeekForecastWeather=(response,descriptions_list)=>{let foreacast_data=[];let descriptions_data=[];if(!response||Object.keys(response).length===0||response.cod==='404')return[];else response===null||response===void 0?void 0:response.list.slice().map((item,idx)=>{descriptions_data.push({description:item.weather[0].description,date:item.dt_txt.substring(0,10)});foreacast_data.push({date:item.dt_txt.substring(0,10),temp:item.main.temp,humidity:item.main.humidity,wind:item.wind.speed,clouds:item.clouds.all});return{idx,item};});const groupByDate=groupBy('date');let grouped_forecast_data=groupByDate(foreacast_data);let grouped_forecast_descriptions=groupByDate(descriptions_data);const description_keys=Object.keys(grouped_forecast_descriptions);let dayDescList=[];description_keys.forEach(key=>{let singleDayDescriptions=grouped_forecast_descriptions[key].map(item=>item.description);let mostFrequentDescription=getMostFrequentWeather(singleDayDescriptions);dayDescList.push(mostFrequentDescription);});const forecast_keys=Object.keys(grouped_forecast_data);let dayAvgsList=[];forecast_keys.forEach((key,idx)=>{let dayTempsList=[];let dayHumidityList=[];let dayWindList=[];let dayCloudsList=[];for(let i=0;i<grouped_forecast_data[key].length;i++){dayTempsList.push(grouped_forecast_data[key][i].temp);dayHumidityList.push(grouped_forecast_data[key][i].humidity);dayWindList.push(grouped_forecast_data[key][i].wind);dayCloudsList.push(grouped_forecast_data[key][i].clouds);}dayAvgsList.push({date:key,temp:getAverage(dayTempsList),humidity:getAverage(dayHumidityList),wind:getAverage(dayWindList,false),clouds:getAverage(dayCloudsList),description:dayDescList[idx],icon:descriptionToIconName(dayDescList[idx],descriptions_list)});});return dayAvgsList;};export const getTodayForecastWeather=(response,current_date,current_datetime)=>{let all_today_forecasts=[];if(!response||Object.keys(response).length===0||response.cod==='404')return[];else response===null||response===void 0?void 0:response.list.slice().map(item=>{if(item.dt_txt.startsWith(current_date.substring(0,10))){if(item.dt>current_datetime){all_today_forecasts.push({time:item.dt_txt.split(' ')[1].substring(0,5),icon:item.weather[0].icon,temperature:Math.round(item.main.temp)+' °C'});}}return all_today_forecasts;});if(all_today_forecasts.length<7){return[...all_today_forecasts];}else{return all_today_forecasts.slice(-6);}};","map":{"version":3,"names":["groupBy","key","group","array","reduce","acc","obj","property","date","rest","_objectWithoutProperties","_excluded","push","getAverage","isRound","arguments","length","undefined","average","Math","round","a","b","toFixed","getMostFrequentWeather","arr","hashmap","val","Object","keys","descriptionToIconName","desc","descriptions_list","iconName","find","item","description","icon","getWeekForecastWeather","response","foreacast_data","descriptions_data","cod","list","slice","map","idx","weather","dt_txt","substring","temp","main","humidity","wind","speed","clouds","all","groupByDate","grouped_forecast_data","grouped_forecast_descriptions","description_keys","dayDescList","forEach","singleDayDescriptions","mostFrequentDescription","forecast_keys","dayAvgsList","dayTempsList","dayHumidityList","dayWindList","dayCloudsList","i","getTodayForecastWeather","current_date","current_datetime","all_today_forecasts","startsWith","dt","time","split","temperature"],"sources":["/workspace/the-weather-forecasting-main/src/utilities/DataUtils.js"],"sourcesContent":["export function groupBy(key) {\n  return function group(array) {\n    return array.reduce((acc, obj) => {\n      const property = obj[key];\n      const { date, ...rest } = obj;\n      acc[property] = acc[property] || [];\n      acc[property].push(rest);\n      return acc;\n    }, {});\n  };\n}\n\nexport function getAverage(array, isRound = true) {\n  let average = 0;\n  if (isRound) {\n    average = Math.round(array.reduce((a, b) => a + b, 0) / array.length);\n    if (average === 0) {\n      average = 0;\n    }\n  } else average = (array.reduce((a, b) => a + b, 0) / array.length).toFixed(2);\n\n  return average;\n}\n\nexport function getMostFrequentWeather(arr) {\n  const hashmap = arr.reduce((acc, val) => {\n    acc[val] = (acc[val] || 0) + 1;\n    return acc;\n  }, {});\n  return Object.keys(hashmap).reduce((a, b) =>\n    hashmap[a] > hashmap[b] ? a : b\n  );\n}\n\nexport const descriptionToIconName = (desc, descriptions_list) => {\n  let iconName = descriptions_list.find((item) => item.description === desc);\n  return iconName.icon || 'unknown';\n};\n\nexport const getWeekForecastWeather = (response, descriptions_list) => {\n  let foreacast_data = [];\n  let descriptions_data = [];\n\n  if (!response || Object.keys(response).length === 0 || response.cod === '404')\n    return [];\n  else\n    response?.list.slice().map((item, idx) => {\n      descriptions_data.push({\n        description: item.weather[0].description,\n        date: item.dt_txt.substring(0, 10),\n      });\n      foreacast_data.push({\n        date: item.dt_txt.substring(0, 10),\n        temp: item.main.temp,\n        humidity: item.main.humidity,\n        wind: item.wind.speed,\n        clouds: item.clouds.all,\n      });\n\n      return { idx, item };\n    });\n\n  const groupByDate = groupBy('date');\n  let grouped_forecast_data = groupByDate(foreacast_data);\n  let grouped_forecast_descriptions = groupByDate(descriptions_data);\n\n  const description_keys = Object.keys(grouped_forecast_descriptions);\n\n  let dayDescList = [];\n\n  description_keys.forEach((key) => {\n    let singleDayDescriptions = grouped_forecast_descriptions[key].map(\n      (item) => item.description\n    );\n    let mostFrequentDescription = getMostFrequentWeather(singleDayDescriptions);\n    dayDescList.push(mostFrequentDescription);\n  });\n\n  const forecast_keys = Object.keys(grouped_forecast_data);\n  let dayAvgsList = [];\n\n  forecast_keys.forEach((key, idx) => {\n    let dayTempsList = [];\n    let dayHumidityList = [];\n    let dayWindList = [];\n    let dayCloudsList = [];\n\n    for (let i = 0; i < grouped_forecast_data[key].length; i++) {\n      dayTempsList.push(grouped_forecast_data[key][i].temp);\n      dayHumidityList.push(grouped_forecast_data[key][i].humidity);\n      dayWindList.push(grouped_forecast_data[key][i].wind);\n      dayCloudsList.push(grouped_forecast_data[key][i].clouds);\n    }\n\n    dayAvgsList.push({\n      date: key,\n      temp: getAverage(dayTempsList),\n      humidity: getAverage(dayHumidityList),\n      wind: getAverage(dayWindList, false),\n      clouds: getAverage(dayCloudsList),\n      description: dayDescList[idx],\n      icon: descriptionToIconName(dayDescList[idx], descriptions_list),\n    });\n  });\n\n  return dayAvgsList;\n};\n\nexport const getTodayForecastWeather = (\n  response,\n  current_date,\n  current_datetime\n) => {\n  let all_today_forecasts = [];\n\n  if (!response || Object.keys(response).length === 0 || response.cod === '404')\n    return [];\n  else\n    response?.list.slice().map((item) => {\n      if (item.dt_txt.startsWith(current_date.substring(0, 10))) {\n        if (item.dt > current_datetime) {\n          all_today_forecasts.push({\n            time: item.dt_txt.split(' ')[1].substring(0, 5),\n            icon: item.weather[0].icon,\n            temperature: Math.round(item.main.temp) + ' °C',\n          });\n        }\n      }\n      return all_today_forecasts;\n    });\n\n  if (all_today_forecasts.length < 7) {\n    return [...all_today_forecasts];\n  } else {\n    return all_today_forecasts.slice(-6);\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}