{"ast":null,"code":"const GEO_API_URL='https://wft-geo-db.p.rapidapi.com/v1/geo';const WEATHER_API_URL='https://api.openweathermap.org/data/2.5';const WEATHER_API_KEY='Your API KEY';const GEO_API_OPTIONS={method:'GET',headers:{'X-RapidAPI-Key':'4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917','X-RapidAPI-Host':'wft-geo-db.p.rapidapi.com'}};export async function fetchWeatherData(lat,lon){try{let[weatherPromise,forcastPromise]=await Promise.all([fetch(\"\".concat(WEATHER_API_URL,\"/weather?lat=\").concat(lat,\"&lon=\").concat(lon,\"&appid=\").concat(WEATHER_API_KEY,\"&units=metric\")),fetch(\"\".concat(WEATHER_API_URL,\"/forecast?lat=\").concat(lat,\"&lon=\").concat(lon,\"&appid=\").concat(WEATHER_API_KEY,\"&units=metric\"))]);const weatherResponse=await weatherPromise.json();const forcastResponse=await forcastPromise.json();return[weatherResponse,forcastResponse];}catch(error){console.log(error);}}export async function fetchCities(input){try{const response=await fetch(\"\".concat(GEO_API_URL,\"/cities?minPopulation=10000&namePrefix=\").concat(input),GEO_API_OPTIONS);const data=await response.json();return data;}catch(error){console.log(error);return;}}export async function reverseGeocode(lat,lon){try{const response=await fetch(\"https://api.openweathermap.org/geo/1.0/reverse?lat=\".concat(lat,\"&lon=\").concat(lon,\"&limit=1&appid=\").concat(WEATHER_API_KEY));const data=await response.json();if(Array.isArray(data)&&data.length>0){return data[0];}return null;}catch(error){console.log(error);return null;}}","map":{"version":3,"names":["GEO_API_URL","WEATHER_API_URL","WEATHER_API_KEY","GEO_API_OPTIONS","method","headers","fetchWeatherData","lat","lon","weatherPromise","forcastPromise","Promise","all","fetch","concat","weatherResponse","json","forcastResponse","error","console","log","fetchCities","input","response","data","reverseGeocode","Array","isArray","length"],"sources":["/workspace/the-weather-forecasting-main/src/api/OpenWeatherService.js"],"sourcesContent":["const GEO_API_URL = 'https://wft-geo-db.p.rapidapi.com/v1/geo';\n\nconst WEATHER_API_URL = 'https://api.openweathermap.org/data/2.5';\nconst WEATHER_API_KEY = 'Your API KEY';\n\nconst GEO_API_OPTIONS = {\n  method: 'GET',\n  headers: {\n    'X-RapidAPI-Key': '4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917',\n    'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com',\n  },\n};\n\nexport async function fetchWeatherData(lat, lon) {\n  try {\n    let [weatherPromise, forcastPromise] = await Promise.all([\n      fetch(\n        `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n      ),\n      fetch(\n        `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n      ),\n    ]);\n\n    const weatherResponse = await weatherPromise.json();\n    const forcastResponse = await forcastPromise.json();\n    return [weatherResponse, forcastResponse];\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchCities(input) {\n  try {\n    const response = await fetch(\n      `${GEO_API_URL}/cities?minPopulation=10000&namePrefix=${input}`,\n      GEO_API_OPTIONS\n    );\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n    return;\n  }\n}\n\nexport async function reverseGeocode(lat, lon) {\n  try {\n    const response = await fetch(\n      `https://api.openweathermap.org/geo/1.0/reverse?lat=${lat}&lon=${lon}&limit=1&appid=${WEATHER_API_KEY}`\n    );\n    const data = await response.json();\n    if (Array.isArray(data) && data.length > 0) {\n      return data[0];\n    }\n    return null;\n  } catch (error) {\n    console.log(error);\n    return null;\n  }\n}\n"],"mappings":"AAAA,KAAM,CAAAA,WAAW,CAAG,0CAA0C,CAE9D,KAAM,CAAAC,eAAe,CAAG,yCAAyC,CACjE,KAAM,CAAAC,eAAe,CAAG,cAAc,CAEtC,KAAM,CAAAC,eAAe,CAAG,CACtBC,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,gBAAgB,CAAE,oDAAoD,CACtE,iBAAiB,CAAE,2BACrB,CACF,CAAC,CAED,MAAO,eAAe,CAAAC,gBAAgBA,CAACC,GAAG,CAAEC,GAAG,CAAE,CAC/C,GAAI,CACF,GAAI,CAACC,cAAc,CAAEC,cAAc,CAAC,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAAC,CACvDC,KAAK,IAAAC,MAAA,CACAb,eAAe,kBAAAa,MAAA,CAAgBP,GAAG,UAAAO,MAAA,CAAQN,GAAG,YAAAM,MAAA,CAAUZ,eAAe,iBAC3E,CAAC,CACDW,KAAK,IAAAC,MAAA,CACAb,eAAe,mBAAAa,MAAA,CAAiBP,GAAG,UAAAO,MAAA,CAAQN,GAAG,YAAAM,MAAA,CAAUZ,eAAe,iBAC5E,CAAC,CACF,CAAC,CAEF,KAAM,CAAAa,eAAe,CAAG,KAAM,CAAAN,cAAc,CAACO,IAAI,CAAC,CAAC,CACnD,KAAM,CAAAC,eAAe,CAAG,KAAM,CAAAP,cAAc,CAACM,IAAI,CAAC,CAAC,CACnD,MAAO,CAACD,eAAe,CAAEE,eAAe,CAAC,CAC3C,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CACpB,CACF,CAEA,MAAO,eAAe,CAAAG,WAAWA,CAACC,KAAK,CAAE,CACvC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAV,KAAK,IAAAC,MAAA,CACvBd,WAAW,4CAAAc,MAAA,CAA0CQ,KAAK,EAC7DnB,eACF,CAAC,CAED,KAAM,CAAAqB,IAAI,CAAG,KAAM,CAAAD,QAAQ,CAACP,IAAI,CAAC,CAAC,CAClC,MAAO,CAAAQ,IAAI,CACb,CAAE,MAAON,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAClB,OACF,CACF,CAEA,MAAO,eAAe,CAAAO,cAAcA,CAAClB,GAAG,CAAEC,GAAG,CAAE,CAC7C,GAAI,CACF,KAAM,CAAAe,QAAQ,CAAG,KAAM,CAAAV,KAAK,uDAAAC,MAAA,CAC4BP,GAAG,UAAAO,MAAA,CAAQN,GAAG,oBAAAM,MAAA,CAAkBZ,eAAe,CACvG,CAAC,CACD,KAAM,CAAAsB,IAAI,CAAG,KAAM,CAAAD,QAAQ,CAACP,IAAI,CAAC,CAAC,CAClC,GAAIU,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAIA,IAAI,CAACI,MAAM,CAAG,CAAC,CAAE,CAC1C,MAAO,CAAAJ,IAAI,CAAC,CAAC,CAAC,CAChB,CACA,MAAO,KAAI,CACb,CAAE,MAAON,KAAK,CAAE,CACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAClB,MAAO,KAAI,CACb,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}